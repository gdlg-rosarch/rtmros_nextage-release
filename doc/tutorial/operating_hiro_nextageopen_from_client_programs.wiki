## page was renamed from rtmros_nextage/Tutorials/Operating Hiro/NEXTAGE OPEN from Client Pograms
## For instruction on writing tutorials
## http://www.ros.org/wiki/WritingTutorials
####################################
##FILL ME IN
####################################
## for a custom note with links:
## note =
## for the canned note of "This tutorial assumes that you have completed the previous tutorials:" just add the links 
## note.0= 
## descriptive title for the tutorial
## title = Operating Hiro/NEXTAGE OPEN from Client Pograms
## multi-line description to be displayed in search 
## description = 
## the next tutorial description (optional)
## next =
## links to next tutorial (optional)
## next.0.link=
## next.1.link=
## what level user is this tutorial for 
## level= (IntermediateCategory)
## keywords =
####################################

<<IncludeCSTemplate(TutorialCSHeaderTemplate)>>
<<TableOfContents(4)>>

== Common Task for Simulation and Real Robot ==
A configuration for `rtm` environment common for simulation and for real robot 
{{{
$ source `rospack find openrtm_tools`/scripts/rtshell-setup.sh
}}}

    The above command includes setting `PYTHONPATH` for [[http://wiki.ros.org/rtshell|rtshell]], creating aliases to more easily run `rtm` tools:

    {{{
    $ alias rtmlaunch='`rospack find hrpsys_ros_bridge`/scripts/rtmlaunch'
    $ alias rtmtest='`rospack find hrpsys_ros_bridge`/scripts/rtmtest'
    }}}

== Working in a simulator environment ==
Then, launch a simulator.
{{{
$ rtmlaunch hironx_ros_bridge hironx_ros_bridge_simulation.launch   (HIRO)
$ rtmlaunch nextage_ros_bridge nextage_ros_bridge_simulation.launch (NEXTAGE OPEN)
}}}

    This launch file does mainly two things; load a virtual robot on the simulator by:
    {{{
    $ rtmlaunch hrionx_ros_bridge hironx_startup.launch
    }}}
    
    And start processes that work as a bridge between ROS and hrpsys.
    {{{
    $ roslaunch hrionx_ros_bridge hironx_ros_bridge.launch    (HIRO)
    $ roslaunch hrionx_ros_bridge hironx_ros_bridge.launch    (NEXTAGE OPEN)
    }}}

If you see the following or similar on command prompt, your simulator is good:

    {{{
    [ INFO] [1375160303.399785831, 483.554999999]: [HrpsysSeqStateROSBridge0] @onExecutece 0 is working at 201[Hz]
    [ INFO] [1375160304.408500642, 484.544999999]: [HrpsysSeqStateROSBridge0] @onExecutece 0 is working at 198[Hz]
    }}}

    And a robot on `hrpsys` viewer like this:
    {{http://wiki.ros.org/hrpsys?action=AttachFile&do=get&target=snap_tutorial_hrpsysViewer.png|hrpsys_viewer|width="640"}}

Then setting for `CORBA`.
{{{
$ export ORBInitRef="NameService=corbaloc:iiop:localhost:15005/NameService"
}}}

You can check robot model on RViz visualizer:
{{{
$ rosrun rviz rviz -d `rospack find hironx_ros_bridge`/models/kawada-hironx.rviz  (HIRO)
$ rosrun rviz rviz -d `rospack find nextage_moveit_config`/launch/moveit.rviz     (NEXTAGE OPEN)
}}}

== Working with a real robot ==
Since `hrpsys` should be already running if the real robot is on, you only have to launch [[http://wiki.ros.org/hrpsys_ros_bridge|hrpsys_ros_bridge]] on your computer. Replace `%HOSTNAME%` with an appropriate value in your environment; eg. `hiro001`;
{{{
$ roslaunch hironx_ros_bridge hironx_ros_bridge.launch nameserver:=%HOSTNAME%    (HIRO)
$ roslaunch nextage_ros_bridge nextage_ros_bridge.launch nameserver:=%HOSTNAME%  (NEXTAGE OPEN)
}}}

Then do something like this (adjust to your environment especially the location of wrl file, port number, robot's hostname):
{{{
$ rosrun hironx_ros_bridge hironx.py -- --robot RobotHardware0 --modelfile /opt/jsk/etc/HIRONX/model/main_15dof.wrl --host hiro014 --port 15005
}}}

Alternatively, using `ipython` you can continue working with robot even after initializing robot by the command above. You can do something like (adjust to your environment):

{{{
$ ipython -i `rospack find hironx_ros_bridge`/scripts/hironx.py -- --robot RobotHardware0 --modelfile /opt/jsk/etc/HIRONX/model/main_15dof.wrl --host hiro014 --port 15005
$ ipython -i `rospack find nextage_ros_bridge`/script/nextage.py -- --robot RobotHardware0 --modelfile /opt/jsk/etc/HIRONX/model/main_15dof.wrl --host nextage101 --port 15005

(On ipython terminal)
robot.getCurrentPosition('RARM_JOINT0')
:  (whatever you like)
}}}

== Initialization ==
Now from here both simulation and robot users do the same.

Initialization:
{{{
$ rosrun hironx_ros_bridge hironx.py    (HIRO)
$ rosrun nextage_ros_bridge nextage.py  (NEXTAGE OPEN)
}}}

    What this command does includes:

    * (Followings are general to hrpsys) Find RTCManager and RobotHardware.
    * Create, connect to, and activate the RT components initially necessary for `hrpsys` controller.
    * Run logger.
    * (Specific to Hiro) Assign joint groups.

== Monitoring ROS state using rqt ==
ROS' new GUI toolset introduced from `Groovy` called [[http://ros.org/wiki/rqt|rqt]] help you to ease the pain to visualize data during development. Here is the suggestion of some tools particularly helpful for `Hiro` (out of [[http://www.ros.org/wiki/rqt/Plugins|30+ rqt tools]]:)

Run:
{{{
$ rqt
}}}

Then click on "Plugins" and choose:
 * `ROS Graph` ([[http://wiki.ros.org/rqt_graph|rqt_graph]])
 * `Robot Monitor` ([[http://wiki.ros.org/rqt_robot_monitor|rqt_robot_monitor]]. This name is expected to be renamed as `Diagnostic Viewer`)
 * `Topic Introspection` ([[http://wiki.ros.org/rqt_topic|rqt_topic]])

You will see a window that looks like this:
{{http://wiki.ros.org/hironx_ros_bridge?action=AttachFile&do=get&target=snap_rqt_graph_monitor_topic_vertical.png|rqt_graph_monitor_topic_vertical|width="640"}}

    (Robot Monitor only show `stale` status since this image was taken with simulator where no `diagnosis` is available)

== Interact with the robot via moveIt ==
You might want to install first `OMPL` planner if you already haven't done so.
{{{
$ apt-get install ros-%YOUR_ROS_DISTRO%-moveit-planners-ompl
}}}

You can use `MoveIt!` `RViz` plugin for interactive manipulation on GUI.
{{{
$ roslaunch hironx_moveit_config moveit_planning_execution.launch   (HIRO)
$ roslaunch nextage_moveit_config moveit_planning_execution.launch  (NEXTAGE OPEN)
}}}

{{http://wiki.ros.org/hironx_moveit_config?action=AttachFile&do=get&target=snap_tutorial_hironx_moveitRvizPlugin.png|tutorial_hironx_moveitRvizPlugin|width="640"}}

    This spawns a new `ROS Node` called "`move_group`" that provides an interface specific to your robot and `MoveIt!` motion planner. 

    rqt_graph now shows it too:
    {{http://wiki.ros.org/hironx_ros_bridge?action=AttachFile&do=get&target=snap_rqt_moveit_hironx.png|rqt_moveit_hironx|width="640"}}

Refer to [[http://moveit.ros.org/wiki/PR2/Rviz_Plugin/Quick_Start|plugin usage page]] (the page uses `PR2` humanoid but you can get the essense). 

Note: [[http://wiki.ros.org/interactive_markers|Interactive Markers]] have not really been implemented with `Hiro`. Patch from YOU is welcomed :).

== Programming example ==

You have options in how you write robot's manipulation task:

 * [[http://www.ros.org/wiki/hrpsys|hrpsys]] in `python`
 * [[http://moveit.ros.org/|MoveIt!]] in `python`
 * [[http://moveit.ros.org/|MoveIt!]] in `C++`

The first two are covered in the following subsections. Note that you can mix all of them to accomplish the task you want. And while using `python`, you can implement codes of `hrpsys` and `MoveIt!` within a single `python` module if you like.

=== Operate robot via hrpsys in Python ===
The robot's operating interface that has been already introduced earlier a few times is defined in following locations:

 * `Hiro` [[http://code.google.com/p/rtm-ros-robotics/source/browse/trunk/rtmros_hironx/hironx_ros_bridge/scripts/hironx.py|hironx_ros_bridge/scripts/hironx.py]]
 * `NEXTAGE OPEN` [[https://github.com/tork-a/rtmros_nextage/blob/groovy-devel/nextage_ros_bridge/src/nextage_ros_bridge/nextage_client.py|nextage.py]]

Here's an example `python` script of how to use it. Here we use `ipython` because of its light-weight but sufficient functionality.

This is the same initialization step as discussed earlier; you're now just doing it on `ipython` shell.
{{{
rospaghetti@italy:$ ipython -i `rospack find hironx_ros_bridge`/scripts/hironx.py  (HIRO)
rospaghetti@italy:$ ipython -i `rospack find nextage_ros_bridge`/scripts/nextage.py  (NEXTAGE OPEN)
[hrpsys.py]  waiting ModelLoader
[hrpsys.py]  start hrpsys
[hrpsys.py]  finding RTCManager and RobotHardware
:
[hrpsys.py]  initialized successfully
}}}

This instantiate `HIRONX` / `NextageClient` class as a variable `robot`. Now see what's available inside of `robot` by:
{{{
In : robot.
}}}

You can tab-complete to know what's available:
{{{
robot.Groups                            robot.getCurrentRPY                     robot.rh_svc
robot.HandClose                         robot.getCurrentRotation                robot.saveLog
robot.HandGroups                        robot.getJointAngles                    robot.sc
robot.HandOpen                          robot.getRTCInstanceList                robot.sc_svc
robot.InitialPose                       robot.getRTCList                        robot.sensors
robot.OffPose                           robot.getReferencePose                  robot.seq
robot.RtcList                           robot.getReferencePosition              robot.seq_svc
robot.abc                               robot.getReferenceRPY                   robot.servoOff
robot.activateComps                     robot.getReferenceRotation              robot.servoOn
robot.afs                               robot.getSensors                        robot.setHandEffort
robot.checkEncoders                     robot.goActual                          robot.setHandJointAngles
robot.clearLog                          robot.goInitial                         robot.setHandWidth
robot.co                                robot.goOffPose                         robot.setJointAngle
robot.co_svc                            robot.hand_width2angles                 robot.setJointAngles
robot.configurator_name                 robot.hgc                               robot.setJointAnglesOfGroup
robot.connectComps                      robot.ic                                robot.setSelfGroups
robot.connectLoggerPort                 robot.init                              robot.setTargetPose
robot.createComp                        robot.isCalibDone                       robot.setupLogger
robot.createComps                       robot.isServoOn                         robot.sh
robot.el                                robot.kf                                robot.sh_svc
robot.el_svc                            robot.lengthDigitalInput                robot.simulation_mode
robot.ep_svc                            robot.lengthDigitalOutput               robot.st
robot.findModelLoader                   robot.liftRobotUp                       robot.stOff
robot.fk                                robot.loadPattern                       robot.tf
robot.fk_svc                            robot.log                               robot.vs
robot.flat2Groups                       robot.log_svc                           robot.waitForModelLoader
robot.getActualState                    robot.moveHand                          robot.waitForRTCManagerAndRoboHardware
robot.getBodyInfo                       robot.ms                                robot.waitInterpolation
robot.getCurrentPose                    robot.readDigitalInput                  robot.waitInterpolationOfGroup
robot.getCurrentPosition                robot.rh                                robot.writeDigitalOutput
}}}

See the list of joint groups and its member `link`s:
{{{
In : robot.Groups
Out: 
[['torso', ['CHEST_JOINT0']],
 ['head', ['HEAD_JOINT0', 'HEAD_JOINT1']],
 ['rarm',
  ['RARM_JOINT0',
   'RARM_JOINT1',
   'RARM_JOINT2',
   'RARM_JOINT3',
   'RARM_JOINT4',
   'RARM_JOINT5']],
 ['larm',
  ['LARM_JOINT0',
   'LARM_JOINT1',
   'LARM_JOINT2',
   'LARM_JOINT3',
   'LARM_JOINT4',
   'LARM_JOINT5']]]
}}}

An advantage of `ipython` as a script interpreter is that you can get api info. Suppose you're looking for how to get the current pose but you have no idea of command, first just guess and tab-complete:
{{{
In : robot.getCurrent
robot.getCurrentPose      robot.getCurrentPosition  robot.getCurrentRPY       robot.getCurrentRotation
}}}

then put "?" at the end of the command that fascinates you:
{{{
In : robot.getCurrentPose?
Type:       instancemethod
Base Class: <type 'instancemethod'>
String Form:<bound method HIRONX.getCurrentPose of <__main__.HIRONX instance at 0x1f39758>>
Namespace:  Interactive
File:       /opt/ros/groovy/lib/python2.7/dist-packages/hrpsys_config.py
Definition: robot.getCurrentPose(self, lname)
Docstring:  <no docstring>
}}}

Here you know there's a method `getCurrentPose` that takes `lname` that stands for `link name`. So run:
{{{
In: robot.getCurrentPose('RARM_JOINT0')
Out: 
[0.912826202314136,
 -0.4083482880688395,
 0.0,
 0.0,
 0.39443415756662026,
 0.8817224037285941,
 -0.25881904510252074,
 -0.145,
 0.1056883139872261,
 0.2362568060275051,
 0.9659258262890683,
 0.370296,
 0.0,
 0.0,
 0.0,
 1.0]
}}}

`getCurrentPose` returns the rotational matrix and the position of the given link in 1 dimensional list. You could also get only `position`:
{{{
In: robot.getCurrent
robot.getCurrentPose      robot.getCurrentPosition  robot.getCurrentRPY       robot.getCurrentRotation
In : robot.getCurrentPosition('RARM_JOINT0')
Out: [0.0, -0.145, 0.370296]
}}}

In `hrpsys`, position vector is presented as a list with three elements [ x, y, z ] where:
{{{
 x: forward 
 y: left
 z: upward
}}}
 
Now let's move an arm. First go to initial pose.
{{{
In : robot.goInitial()
}}}

{{{
In : robot.setTargetPose?
Type:       instancemethod
Base Class: <type 'instancemethod'>
String Form:<bound method HIRONX.setTargetPose of <__main__.HIRONX instance at 0x333b758>>
Namespace:  Interactive
File:       /opt/ros/groovy/lib/python2.7/dist-packages/hrpsys_config.py
Definition: robot.setTargetPose(self, gname, pos, rpy, tm)
Docstring:  <no docstring>
}}}

`gname` is the name of the `joint group`. `pos` and `rpy` are in list format. First, store the current values into variables:
{{{
In : pos = robot.getCurrentPosition('RARM_JOINT3')
In : rpy = robot.getReferenceRPY('RARM_JOINT3')
In : tm = 3
}}}

Current `pose` should look like:

{{http://wiki.ros.org/hironx_ros_bridge?action=AttachFile&do=get&target=hiro_before_move_rarm.png|hiro_before_move_rarm|width="640"}}

Then randomly manipulate `position`, and execute:
{{{
In : pos[2] = 0.5

In : robot.setTargetPose('rarm', pos, rpy, tm)
Out: True
}}}

Now a plan is successfully shown for the right arm to be moved to the specified `pose` like this image:

{{http://wiki.ros.org/hironx_ros_bridge?action=AttachFile&do=get&target=hiro_after_move_rarm.png|hiro_after_move_rarm|width="640"}}

When you're done with the robot,
{{{
In : robot.goOffPose()
}}}

{{http://wiki.ros.org/hironx_ros_bridge?action=AttachFile&do=get&target=hiro_powerOff.png|hiro_powerOff|width="640"}}

Here are some other methods that could be used with real robot:
{{{
robot.servoOn
robot.servoOff
robot.checkEncoders
robot.setJointAnglesOfGroup
}}}

=== Operate robot via moveit in Python ===
[[http://moveit.ros.org/wiki/MoveIt_Commander|moveit_commander]] package offers a capability to write a `MoveIt!` client in `Python` ([[http://docs.ros.org/hydro/api/moveit_commander/html/annotated.html|API doc]]). 

To utilize it, you might want to install `MoveIt!`'s python client interface if you already haven't done so.
{{{
$ apt-get install ros-%YOUR_ROS_DISTRO%-moveit-commander
}}}

You can find an example in [[https://code.google.com/p/rtm-ros-robotics/source/browse/trunk/rtmros_hironx/hironx_ros_bridge/test/test_hironx_moveit.py|test_hironx_moveit.py file in hironx_ros_bridge]], which looks like:

{{{
from geometry_msgs.msg import Pose, PoseStamped
from moveit_commander import MoveGroupCommander, conversions
import rospy

rospy.init_node("test_hironx_moveit")

rarm = MoveGroupCommander("right_arm")
larm = MoveGroupCommander("left_arm")

rarm_current_pose = rarm.get_current_pose().pose
larm_current_pose = larm.get_current_pose().pose


def _set_target_random(self):
    '''
    @type self: moveit_commander.MoveGroupCommander
    @param self: In this particular test script, the argument "self" is either
                 'rarm' or 'larm'.
    '''
    global current, current2, target
    current = self.get_current_pose()
    print "*current*", current
    target = self.get_random_pose()
    print "*target*", target
    self.set_pose_target(target)
    self.go()
    current2 = self.get_current_pose()
    print "*current2*", current2

MoveGroupCommander._set_target_random = _set_target_random
}}}

    Here goes cody-by-code explanation:
    {{{
    from geometry_msgs.msg import Pose, PoseStamped
    from moveit_commander import MoveGroupCommander, conversions
    import rospy
    }}}
    Python API of MoveIt! is provided via `moveit_commander.MoveGroupCommander`.
    {{{
    rospy.init_node("test_hironx_moveit")
    rarm = MoveGroupCommander("right_arm")
    larm = MoveGroupCommander("left_arm")
    }}}
    We need to run a ROS `Node` (by calling `rospy.init_node()`) in order to use `MoveGroupCommander` from this script.
    {{{
    rarm_current_pose = rarm.get_current_pose().pose
    larm_current_pose = larm.get_current_pose().pose
    }}}
    Getting current positions.
    {{{
    def _set_target_random(self):
        '''
        @type self: moveit_commander.MoveGroupCommander
        @param self: In this particular test script, the argument "self" is either
                     'rarm' or 'larm'.
        '''
        global current, current2, target
        current = self.get_current_pose()
        print "*current*", current
        target = self.get_random_pose()
        print "*target*", target
        self.set_pose_target(target)
        self.go()
        current2 = self.get_current_pose()
        print "*current2*", current2
    }}}
    Define a method that randomly moves an arm.
    {{{
    MoveGroupCommander._set_target_random = _set_target_random
    }}}
    Latch the method to the class (This is very temporary Python solution and is not specific to `MoveIt!` nor to `Hiro`) so that users can call the method per instance of MoveGroupCommander that is created for each arm.
    
Now usage of that file:

0. This test script assumes that Hiro simulator is always running on your machine (you can do that by following [[https://code.google.com/p/rtm-ros-robotics/wiki/hironx_ros_bridge_en|this section]]).

1. run this script by something like:
{{{
$ ipython -i `rospack find hironx_ros_bridge`/test/test_hironx_moveit.py
}}}

2. On `ipython` interpreter, call either method per arm:
{{{
In : larm._set_target_random()
In : rarm._set_target_random()
}}}

You'll see the planning happens on `RViz`.

For a little more methods available in Python, consult [[http://moveit.ros.org/wiki/MoveIt_Commander|moveit_commander wiki]].

## AUTOGENERATED DO NOT DELETE 
## TutorialCategory
## FILL IN THE STACK TUTORIAL CATEGORY HERE
